class Stack():
	def __init__ (self):
		self.items = []
		
	def push(self, item):
		self.items.append(item)
		
	def pop(self):
		return self.items.pop()
	
	def is_empty(self):
		return self.items == []
		
	def peek(self):
		if not self.is_empty():
			return self.items[-1]
		
	def get_stack(self):
		return self.items

def is_match(p1, p2):
    if (p1 == "(" and p2 == ")"):
        return True
    elif p1 == "{" and p2 == "}":
        return True
    elif p1 == "[" and p2 == "]":
        return True
    else:
        return False

class Solution: 
    def isValid(self, s: str) -> bool:
        my_stack = Stack()
        is_balanced = True
        index = 0
        
        while index < len(s) and is_balanced:
            paren = s[index]
            if paren in "{[(":
                my_stack.push(paren)
            else:
                if my_stack.is_empty():
                    is_balanced = False
                else:
                    top = my_stack.pop()
                    if not is_match(top, paren):
                        is_balanced = False
            index+=1
            
        if my_stack.is_empty() and is_balanced:
            return True
        else:
            return False
