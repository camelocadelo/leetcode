# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        my_list = []
        while head is not None:
            my_list.append(head.val)
            head = head.next
        size = len(my_list)
        if size == 1:
            return None
        else:
            index = size - n
            my_list.pop(index)
            my_list = my_list[::-1]
            rootNode = ListNode(my_list[0])
            for el in my_list[1:]:
                newNode = ListNode(el)
                newNode.next = rootNode
                rootNode = newNode
            return rootNode


#2-pass algorithm
def removeNthFromEnd(head, n):
	dummy = ListNode(0)
	dummy.next = head
	length = 0
	first = head
	while first is not None:
		length += 1
		first = first.next
	length -= n
	first = dummy
	while(length > 0):
		length -= 1
		first = first.next
	first.next = first.next.next
	return dummy.next
	
#1-pass 2-pointers algorithm
class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        dummy = ListNode(0)
        dummy.next = head
        first = dummy
        second = dummy
        #Advances the first pointer so that the gap btwn first and second nodes is n nodes apart
        for i in range(1, n+2):
            first = first.next
        while (first is not None):
            first = first.next
            second = second.next
        second.next = second.next.next
        return dummy.next
