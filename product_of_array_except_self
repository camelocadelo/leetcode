class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        nums_copy = []
        nums_copy = nums.copy()
        result_array = []
        for i in range(0, len(nums)):
            nums[i] = 1
            result = numpy.prod(nums)
            result_array.append(result)
            nums = nums_copy.copy()
        return result_array


// 2nd solution

import numpy 

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        nums_copy = []
        nums_copy = nums.copy()
        result_array = []
        nums[0] = 1
        res1 = numpy.prod(nums)
        result_array.append(res1)
        nums = nums_copy.copy()
        for i in range(1, len(nums) - 1):
            left_array = nums[0:i]
            right_array = nums[i+1: ]
            l_a_p = numpy.prod(left_array)
            r_a_p = numpy.prod(right_array)
            result = l_a_p * r_a_p
            result_array.append(result)
        nums[-1] = 1
        res2 = numpy.prod(nums)
        result_array.append(res2)
        return result_array
